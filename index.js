"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AuroraNet = require("express-aurorajs");
var timerdaemon = require("timerdaemon");
var OldIngeco = require("./modules/oldingeco");
var rpj = require("request-promise-json");
var AutoAurora = (function (_super) {
    __extends(AutoAurora, _super);
    function AutoAurora(sensors, tz, options) {
        _super.call(this, sensors, tz);
        var _this = this;
        if (!options) {
            options = {};
        }
        if (!options.done) {
            options.done = function (d) {
                for (var i = 0; i < d.length; i++) {
                    var sensor = d[i];
                    rpj.post("http://localhost/db/sensors/" + sensor.uid, { data: sensor });
                }
            };
        }
        if (!options.time)
            options.time = 30000;
        timerdaemon.pre(options.time, function () {
            _this.data().then(function (d) {
                if (options.urlingecold) {
                    OldIngeco(d, options.urlingecold);
                }
                options.done(d);
            }).catch(function (err) {
                console.log(err);
            });
        });
    }
    return AutoAurora;
}(AuroraNet));
module.exports = function (sensors, tz, options) {
    var AutoA = new AutoAurora(sensors, tz, options);
    return AutoA.Router();
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQU8sU0FBUyxXQUFXLGtCQUFrQixDQUFDLENBQUM7QUFFL0MsSUFBTyxXQUFXLFdBQVcsYUFBYSxDQUFDLENBQUM7QUFFNUMsSUFBTyxTQUFTLFdBQVcscUJBQXFCLENBQUMsQ0FBQztBQUdsRCxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQVkxQztJQUF5Qiw4QkFBUztJQUU5QixvQkFBWSxPQUFtQixFQUFFLEVBQVUsRUFBRSxPQUFjO1FBQ3ZELGtCQUFNLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUduQixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7UUFFakIsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ1gsT0FBTyxHQUFTLEVBQUUsQ0FBQTtRQUN0QixDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNoQixPQUFPLENBQUMsSUFBSSxHQUFHLFVBQVMsQ0FBQztnQkFFckIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7b0JBRWhDLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFFbEIsR0FBRyxDQUFDLElBQUksQ0FBQyw4QkFBOEIsR0FBRyxNQUFNLENBQUMsR0FBRyxFQUFFLEVBQUMsSUFBSSxFQUFDLE1BQU0sRUFBQyxDQUFDLENBQUM7Z0JBRXpFLENBQUM7WUFHTCxDQUFDLENBQUE7UUFHTCxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1lBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7UUFFeEMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFO1lBRTFCLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBUyxDQUFDO2dCQUV4QyxFQUFFLENBQUEsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUEsQ0FBQztvQkFFcEIsU0FBUyxDQUFDLENBQUMsRUFBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBRXJDLENBQUM7Z0JBR21CLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFReEIsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVMsR0FBRztnQkFDakIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNyQixDQUFDLENBQUMsQ0FBQTtRQUVOLENBQUMsQ0FBQyxDQUFDO0lBSVAsQ0FBQztJQUVMLGlCQUFDO0FBQUQsQ0E1REEsQUE0REMsQ0E1RHdCLFNBQVMsR0E0RGpDO0FBR0QsaUJBQVMsVUFBUyxPQUFtQixFQUFFLEVBQVUsRUFBRSxPQUFjO0lBRTdELElBQUksS0FBSyxHQUFHLElBQUksVUFBVSxDQUFDLE9BQU8sRUFBRSxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFakQsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUcxQixDQUFDLENBQUEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXVyb3JhTmV0ID0gcmVxdWlyZShcImV4cHJlc3MtYXVyb3JhanNcIik7XG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcbmltcG9ydCB0aW1lcmRhZW1vbiA9IHJlcXVpcmUoXCJ0aW1lcmRhZW1vblwiKTtcblxuaW1wb3J0IE9sZEluZ2VjbyA9IHJlcXVpcmUoXCIuL21vZHVsZXMvb2xkaW5nZWNvXCIpO1xuaW1wb3J0IFBvd2VyUGFydGlhbHMgPSByZXF1aXJlKFwiLi9tb2R1bGVzL3NldHBvd2VycGFydGlhbHNcIik7XG5cbmxldCBycGogPSByZXF1aXJlKFwicmVxdWVzdC1wcm9taXNlLWpzb25cIik7XG5cbmludGVyZmFjZSBJQWRkcmVzcyB7XG4gICAgdXVpZDogc3RyaW5nO1xuICAgIGRldjogc3RyaW5nO1xuICAgIGFkZHJlc3M6IG51bWJlcjtcbn1cbmludGVyZmFjZSBJb3B0IHtcbiAgICB0aW1lPzogbnVtYmVyO1xuICAgIGRvbmU/OiBGdW5jdGlvbjtcbiAgICB1cmxpbmdlY29sZD86c3RyaW5nO1xufVxuY2xhc3MgQXV0b0F1cm9yYSBleHRlbmRzIEF1cm9yYU5ldCB7XG5cbiAgICBjb25zdHJ1Y3RvcihzZW5zb3JzOiBJQWRkcmVzc1tdLCB0ejogc3RyaW5nLCBvcHRpb25zPzogSW9wdCkge1xuICAgICAgICBzdXBlcihzZW5zb3JzLCB0eik7XG5cblxuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIGlmICghb3B0aW9ucykge1xuICAgICAgICAgICAgb3B0aW9ucyA9IDxJb3B0Pnt9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW9wdGlvbnMuZG9uZSkge1xuICAgICAgICAgICAgb3B0aW9ucy5kb25lID0gZnVuY3Rpb24oZCkge1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHNlbnNvciA9IGRbaV07XG5cbiAgICAgICAgICAgICAgICAgICAgcnBqLnBvc3QoXCJodHRwOi8vbG9jYWxob3N0L2RiL3NlbnNvcnMvXCIgKyBzZW5zb3IudWlkLCB7ZGF0YTpzZW5zb3J9KTtcblxuICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICB9XG5cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFvcHRpb25zLnRpbWUpIG9wdGlvbnMudGltZSA9IDMwMDAwO1xuXG4gICAgICAgIHRpbWVyZGFlbW9uLnByZShvcHRpb25zLnRpbWUsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBfdGhpcy5kYXRhKCkudGhlbihmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgXG5pZihvcHRpb25zLnVybGluZ2Vjb2xkKXtcblxuICAgIE9sZEluZ2VjbyhkLG9wdGlvbnMudXJsaW5nZWNvbGQpO1xuICAgIFxufSBcblxuICAgIFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmRvbmUoZCk7XG5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgfSk7XG5cblxuXG4gICAgfVxuXG59XG5cblxuZXhwb3J0ID0gZnVuY3Rpb24oc2Vuc29yczogSUFkZHJlc3NbXSwgdHo6IHN0cmluZywgb3B0aW9ucz86IElvcHQpIHtcblxuICAgIGxldCBBdXRvQSA9IG5ldyBBdXRvQXVyb3JhKHNlbnNvcnMsIHR6LCBvcHRpb25zKTtcblxuICAgIHJldHVybiBBdXRvQS5Sb3V0ZXIoKTtcblxuXG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
