"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AuroraNet = require("express-aurorajs");
var timerdaemon = require("timerdaemon");
var rpj = require("request-promise-json");
var AutoAurora = (function (_super) {
    __extends(AutoAurora, _super);
    function AutoAurora(sensors, tz, options) {
        _super.call(this, sensors, tz);
        var _this = this;
        if (!options) {
            options = {};
        }
        if (!options.done) {
            options.done = function (d) {
                for (var i = 0; i < d.length; i++) {
                    var sensor = d[i];
                    rpj.post("http://localhost/db/sensors/" + sensor.uid + "/receive", sensor);
                }
            };
        }
        if (!options.time)
            options.time = 30000;
        timerdaemon.pre(options.time, function () {
            _this.data().then(function (d) {
                options.done(d);
            }).catch(function (err) {
                console.log(err);
            });
        });
    }
    return AutoAurora;
}(AuroraNet));
module.exports = function (sensors, tz, options) {
    var AutoA = new AutoAurora(sensors, tz, options);
    return AutoA.Router();
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQU8sU0FBUyxXQUFXLGtCQUFrQixDQUFDLENBQUM7QUFFL0MsSUFBTyxXQUFXLFdBQVcsYUFBYSxDQUFDLENBQUM7QUFFNUMsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFXMUM7SUFBeUIsOEJBQVM7SUFFOUIsb0JBQVksT0FBbUIsRUFBRSxFQUFVLEVBQUUsT0FBYztRQUN2RCxrQkFBTSxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFHbkIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBRWpCLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNYLE9BQU8sR0FBUyxFQUFFLENBQUE7UUFDdEIsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDaEIsT0FBTyxDQUFDLElBQUksR0FBRyxVQUFTLENBQUM7Z0JBRXJCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO29CQUVoQyxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBRWxCLEdBQUcsQ0FBQyxJQUFJLENBQUMsOEJBQThCLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBRS9FLENBQUM7WUFHTCxDQUFDLENBQUE7UUFHTCxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1lBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7UUFFeEMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFO1lBRTFCLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBUyxDQUFDO2dCQUN4QixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFTLEdBQUc7Z0JBQ2pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDckIsQ0FBQyxDQUFDLENBQUE7UUFFTixDQUFDLENBQUMsQ0FBQztJQUlQLENBQUM7SUFFTCxpQkFBQztBQUFELENBN0NBLEFBNkNDLENBN0N3QixTQUFTLEdBNkNqQztBQUdELGlCQUFTLFVBQVMsT0FBbUIsRUFBRSxFQUFVLEVBQUUsT0FBYztJQUU5RCxJQUFJLEtBQUssR0FBRSxJQUFJLFVBQVUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRWhELE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7QUFHekIsQ0FBQyxDQUFBIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEF1cm9yYU5ldCA9IHJlcXVpcmUoXCJleHByZXNzLWF1cm9yYWpzXCIpO1xuXG5pbXBvcnQgdGltZXJkYWVtb24gPSByZXF1aXJlKFwidGltZXJkYWVtb25cIik7XG5cbmxldCBycGogPSByZXF1aXJlKFwicmVxdWVzdC1wcm9taXNlLWpzb25cIik7XG5cbmludGVyZmFjZSBJQWRkcmVzcyB7XG4gICAgdXVpZDogc3RyaW5nO1xuICAgIGRldjogc3RyaW5nO1xuICAgIGFkZHJlc3M6IG51bWJlcjtcbn1cbmludGVyZmFjZSBJb3B0IHtcbiAgICB0aW1lPzogbnVtYmVyO1xuICAgIGRvbmU/OiBGdW5jdGlvbjtcbn1cbmNsYXNzIEF1dG9BdXJvcmEgZXh0ZW5kcyBBdXJvcmFOZXQge1xuXG4gICAgY29uc3RydWN0b3Ioc2Vuc29yczogSUFkZHJlc3NbXSwgdHo6IHN0cmluZywgb3B0aW9ucz86IElvcHQpIHtcbiAgICAgICAgc3VwZXIoc2Vuc29ycywgdHopO1xuXG5cbiAgICAgICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgICAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSA8SW9wdD57fVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFvcHRpb25zLmRvbmUpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuZG9uZSA9IGZ1bmN0aW9uKGQpIHtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZC5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCBzZW5zb3IgPSBkW2ldO1xuXG4gICAgICAgICAgICAgICAgICAgIHJwai5wb3N0KFwiaHR0cDovL2xvY2FsaG9zdC9kYi9zZW5zb3JzL1wiICsgc2Vuc29yLnVpZCArIFwiL3JlY2VpdmVcIiwgc2Vuc29yKTtcblxuICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICB9XG5cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFvcHRpb25zLnRpbWUpIG9wdGlvbnMudGltZSA9IDMwMDAwO1xuXG4gICAgICAgIHRpbWVyZGFlbW9uLnByZShvcHRpb25zLnRpbWUsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBfdGhpcy5kYXRhKCkudGhlbihmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5kb25lKGQpO1xuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgfSk7XG5cblxuXG4gICAgfVxuXG59XG5cblxuZXhwb3J0ID0gZnVuY3Rpb24oc2Vuc29yczogSUFkZHJlc3NbXSwgdHo6IHN0cmluZywgb3B0aW9ucz86IElvcHQpe1xuICAgIFxuICAgbGV0IEF1dG9BPSBuZXcgQXV0b0F1cm9yYShzZW5zb3JzLCB0eiwgb3B0aW9ucyk7XG4gICBcbiAgIHJldHVybiBBdXRvQS5Sb3V0ZXIoKTtcbiAgIFxuICAgIFxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
