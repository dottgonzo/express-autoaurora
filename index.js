"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AuroraNet = require("express-aurorajs");
var timerdaemon = require("timerdaemon");
var rpj = require("request-promise-json");
var AutoAurora = (function (_super) {
    __extends(AutoAurora, _super);
    function AutoAurora(obj) {
        _super.call(this, obj.conf.addresses, obj.conf.tz);
        var _this = this;
        if (!obj.options) {
            obj.options = {};
        }
        if (!obj.options.done) {
            obj.options.done = function (d) {
                rpj.post("http://localhost/heartbeat");
                for (var i = 0; i < d.length; i++) {
                    var sensor = d[i];
                    rpj.post("http://localhost/sensors/" + sensor.uid, { data: sensor });
                }
            };
        }
        if (!obj.options.time)
            obj.options.time = 30000;
        setTimeout(function () {
            timerdaemon.pre(obj.options.time, function () {
                console.log("queryng...");
                _this.data().then(function (d) {
                    obj.options.done(d);
                }).catch(function (err) {
                    console.log(err);
                });
            });
        }, 30000);
    }
    return AutoAurora;
}(AuroraNet));
module.exports = function (obj) {
    var AutoA = new AutoAurora(obj);
    return AutoA.Router();
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQU8sU0FBUyxXQUFXLGtCQUFrQixDQUFDLENBQUM7QUFFL0MsSUFBTyxXQUFXLFdBQVcsYUFBYSxDQUFDLENBQUM7QUFJNUMsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFZMUM7SUFBeUIsOEJBQVM7SUFFOUIsb0JBQVksR0FBb0U7UUFDNUUsa0JBQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUd2QyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7UUFFakIsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNmLEdBQUcsQ0FBQyxPQUFPLEdBQVMsRUFBRSxDQUFDO1FBQzNCLENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNwQixHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxVQUFTLENBQUM7Z0JBRXpCLEdBQUcsQ0FBQyxJQUFJLENBQUMsNEJBQTRCLENBQUMsQ0FBQztnQkFDdkMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7b0JBRWhDLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFFbEIsR0FBRyxDQUFDLElBQUksQ0FBQywyQkFBMkIsR0FBRyxNQUFNLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7Z0JBRXpFLENBQUM7WUFFTCxDQUFDLENBQUE7UUFHTCxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztZQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUVoRCxVQUFVLENBQUM7WUFDUCxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFO2dCQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUMxQixLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVMsQ0FBQztvQkFHeEIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBR3hCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFTLEdBQUc7b0JBQ2pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3JCLENBQUMsQ0FBQyxDQUFDO1lBRVAsQ0FBQyxDQUFDLENBQUM7UUFFUCxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFHZCxDQUFDO0lBRUwsaUJBQUM7QUFBRCxDQW5EQSxBQW1EQyxDQW5Ed0IsU0FBUyxHQW1EakM7QUFHRCxpQkFBUyxVQUFTLEdBQW9FO0lBRWxGLElBQUksS0FBSyxHQUFHLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRWhDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7QUFHMUIsQ0FBQyxDQUFBIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEF1cm9yYU5ldCA9IHJlcXVpcmUoXCJleHByZXNzLWF1cm9yYWpzXCIpO1xuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQgdGltZXJkYWVtb24gPSByZXF1aXJlKFwidGltZXJkYWVtb25cIik7XG5cbmltcG9ydCBQb3dlclBhcnRpYWxzID0gcmVxdWlyZShcIi4vbW9kdWxlcy9zZXRwb3dlcnBhcnRpYWxzXCIpO1xuXG5sZXQgcnBqID0gcmVxdWlyZShcInJlcXVlc3QtcHJvbWlzZS1qc29uXCIpO1xuXG5pbnRlcmZhY2UgSUFkZHJlc3Mge1xuICAgIHV1aWQ6IHN0cmluZztcbiAgICBkZXY6IHN0cmluZztcbiAgICBhZGRyZXNzOiBudW1iZXI7XG59XG5pbnRlcmZhY2UgSW9wdCB7XG4gICAgdGltZT86IG51bWJlcjtcbiAgICBkb25lPzogRnVuY3Rpb247XG4gICAgdXJsaW5nZWNvbGQ/OiBzdHJpbmc7XG59XG5jbGFzcyBBdXRvQXVyb3JhIGV4dGVuZHMgQXVyb3JhTmV0IHtcblxuICAgIGNvbnN0cnVjdG9yKG9iajogeyBjb25mOiB7IGFkZHJlc3NlczogSUFkZHJlc3NbXSwgdHo6IHN0cmluZyB9LCBvcHRpb25zPzogSW9wdCB9KSB7XG4gICAgICAgIHN1cGVyKG9iai5jb25mLmFkZHJlc3Nlcywgb2JqLmNvbmYudHopO1xuXG5cbiAgICAgICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgICAgICBpZiAoIW9iai5vcHRpb25zKSB7XG4gICAgICAgICAgICBvYmoub3B0aW9ucyA9IDxJb3B0Pnt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFvYmoub3B0aW9ucy5kb25lKSB7XG4gICAgICAgICAgICBvYmoub3B0aW9ucy5kb25lID0gZnVuY3Rpb24oZCkge1xuXG4gICAgICAgICAgICAgICAgcnBqLnBvc3QoXCJodHRwOi8vbG9jYWxob3N0L2hlYXJ0YmVhdFwiKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGQubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgc2Vuc29yID0gZFtpXTtcblxuICAgICAgICAgICAgICAgICAgICBycGoucG9zdChcImh0dHA6Ly9sb2NhbGhvc3Qvc2Vuc29ycy9cIiArIHNlbnNvci51aWQsIHsgZGF0YTogc2Vuc29yIH0pO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFvYmoub3B0aW9ucy50aW1lKSBvYmoub3B0aW9ucy50aW1lID0gMzAwMDA7XG5cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRpbWVyZGFlbW9uLnByZShvYmoub3B0aW9ucy50aW1lLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInF1ZXJ5bmcuLi5cIik7XG4gICAgICAgICAgICAgICAgX3RoaXMuZGF0YSgpLnRoZW4oZnVuY3Rpb24oZCkge1xuXG5cbiAgICAgICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMuZG9uZShkKTtcblxuXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0sIDMwMDAwKTtcblxuXG4gICAgfVxuXG59XG5cblxuZXhwb3J0ID0gZnVuY3Rpb24ob2JqOiB7IGNvbmY6IHsgYWRkcmVzc2VzOiBJQWRkcmVzc1tdLCB0ejogc3RyaW5nIH0sIG9wdGlvbnM/OiBJb3B0IH0pIHtcblxuICAgIGxldCBBdXRvQSA9IG5ldyBBdXRvQXVyb3JhKG9iaik7XG5cbiAgICByZXR1cm4gQXV0b0EuUm91dGVyKCk7XG5cblxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
