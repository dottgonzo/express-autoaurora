"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AuroraNet = require("express-aurorajs");
var timerdaemon = require("timerdaemon");
var OldIngeco = require("./modules/oldingeco");
var rpj = require("request-promise-json");
var AutoAurora = (function (_super) {
    __extends(AutoAurora, _super);
    function AutoAurora(obj) {
        _super.call(this, obj.addresses, obj.tz);
        var _this = this;
        if (!obj.options) {
            obj.options = {};
        }
        if (!obj.options.done) {
            obj.options.done = function (d) {
                for (var i = 0; i < d.length; i++) {
                    var sensor = d[i];
                    rpj.post("http://localhost/db/sensors/" + sensor.uid, { data: sensor });
                }
            };
        }
        if (!obj.options.time)
            obj.options.time = 30000;
        timerdaemon.pre(obj.options.time, function () {
            _this.data().then(function (d) {
                if (obj.options.urlingecold) {
                    OldIngeco(d, obj.options.urlingecold);
                }
                obj.options.done(d);
            }).catch(function (err) {
                console.log(err);
            });
        });
    }
    return AutoAurora;
}(AuroraNet));
module.exports = function (obj) {
    var AutoA = new AutoAurora(obj);
    return AutoA.Router();
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQU8sU0FBUyxXQUFXLGtCQUFrQixDQUFDLENBQUM7QUFFL0MsSUFBTyxXQUFXLFdBQVcsYUFBYSxDQUFDLENBQUM7QUFFNUMsSUFBTyxTQUFTLFdBQVcscUJBQXFCLENBQUMsQ0FBQztBQUdsRCxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQVkxQztJQUF5Qiw4QkFBUztJQUU5QixvQkFBWSxHQUF1RDtRQUMvRCxrQkFBTSxHQUFHLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUc3QixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7UUFFakIsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNmLEdBQUcsQ0FBQyxPQUFPLEdBQVMsRUFBRSxDQUFBO1FBQzFCLENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNwQixHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxVQUFTLENBQUM7Z0JBRXpCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO29CQUVoQyxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBRWxCLEdBQUcsQ0FBQyxJQUFJLENBQUMsOEJBQThCLEdBQUcsTUFBTSxDQUFDLEdBQUcsRUFBRSxFQUFDLElBQUksRUFBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDO2dCQUV6RSxDQUFDO1lBR0wsQ0FBQyxDQUFBO1FBR0wsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7WUFBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7UUFFaEQsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTtZQUU5QixLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVMsQ0FBQztnQkFFeEMsRUFBRSxDQUFBLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQSxDQUFDO29CQUV4QixTQUFTLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBRXpDLENBQUM7Z0JBR21CLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBUTVCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFTLEdBQUc7Z0JBQ2pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDckIsQ0FBQyxDQUFDLENBQUE7UUFFTixDQUFDLENBQUMsQ0FBQztJQUlQLENBQUM7SUFFTCxpQkFBQztBQUFELENBNURBLEFBNERDLENBNUR3QixTQUFTLEdBNERqQztBQUdELGlCQUFTLFVBQVMsR0FBdUQ7SUFFckUsSUFBSSxLQUFLLEdBQUcsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFaEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUcxQixDQUFDLENBQUEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXVyb3JhTmV0ID0gcmVxdWlyZShcImV4cHJlc3MtYXVyb3JhanNcIik7XG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcbmltcG9ydCB0aW1lcmRhZW1vbiA9IHJlcXVpcmUoXCJ0aW1lcmRhZW1vblwiKTtcblxuaW1wb3J0IE9sZEluZ2VjbyA9IHJlcXVpcmUoXCIuL21vZHVsZXMvb2xkaW5nZWNvXCIpO1xuaW1wb3J0IFBvd2VyUGFydGlhbHMgPSByZXF1aXJlKFwiLi9tb2R1bGVzL3NldHBvd2VycGFydGlhbHNcIik7XG5cbmxldCBycGogPSByZXF1aXJlKFwicmVxdWVzdC1wcm9taXNlLWpzb25cIik7XG5cbmludGVyZmFjZSBJQWRkcmVzcyB7XG4gICAgdXVpZDogc3RyaW5nO1xuICAgIGRldjogc3RyaW5nO1xuICAgIGFkZHJlc3M6IG51bWJlcjtcbn1cbmludGVyZmFjZSBJb3B0IHtcbiAgICB0aW1lPzogbnVtYmVyO1xuICAgIGRvbmU/OiBGdW5jdGlvbjtcbiAgICB1cmxpbmdlY29sZD86c3RyaW5nO1xufVxuY2xhc3MgQXV0b0F1cm9yYSBleHRlbmRzIEF1cm9yYU5ldCB7XG5cbiAgICBjb25zdHJ1Y3RvcihvYmo6e2FkZHJlc3NlczogSUFkZHJlc3NbXSwgdHo6IHN0cmluZywgb3B0aW9ucz86IElvcHR9KSB7XG4gICAgICAgIHN1cGVyKG9iai5hZGRyZXNzZXMsIG9iai50eik7XG5cblxuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIGlmICghb2JqLm9wdGlvbnMpIHtcbiAgICAgICAgICAgIG9iai5vcHRpb25zID0gPElvcHQ+e31cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghb2JqLm9wdGlvbnMuZG9uZSkge1xuICAgICAgICAgICAgb2JqLm9wdGlvbnMuZG9uZSA9IGZ1bmN0aW9uKGQpIHtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZC5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCBzZW5zb3IgPSBkW2ldO1xuXG4gICAgICAgICAgICAgICAgICAgIHJwai5wb3N0KFwiaHR0cDovL2xvY2FsaG9zdC9kYi9zZW5zb3JzL1wiICsgc2Vuc29yLnVpZCwge2RhdGE6c2Vuc29yfSk7XG5cbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghb2JqLm9wdGlvbnMudGltZSkgb2JqLm9wdGlvbnMudGltZSA9IDMwMDAwO1xuXG4gICAgICAgIHRpbWVyZGFlbW9uLnByZShvYmoub3B0aW9ucy50aW1lLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgX3RoaXMuZGF0YSgpLnRoZW4oZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIFxuaWYob2JqLm9wdGlvbnMudXJsaW5nZWNvbGQpe1xuXG4gICAgT2xkSW5nZWNvKGQsb2JqLm9wdGlvbnMudXJsaW5nZWNvbGQpO1xuICAgIFxufSBcblxuICAgIFxuICAgICAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5kb25lKGQpO1xuXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgIH0pO1xuXG5cblxuICAgIH1cblxufVxuXG5cbmV4cG9ydCA9IGZ1bmN0aW9uKG9iajp7YWRkcmVzc2VzOiBJQWRkcmVzc1tdLCB0ejogc3RyaW5nLCBvcHRpb25zPzogSW9wdH0pIHtcblxuICAgIGxldCBBdXRvQSA9IG5ldyBBdXRvQXVyb3JhKG9iaik7XG5cbiAgICByZXR1cm4gQXV0b0EuUm91dGVyKCk7XG5cblxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
