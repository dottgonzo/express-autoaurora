"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AuroraNet = require("express-aurorajs");
var timerdaemon = require("timerdaemon");
var OldIngeco = require("./modules/oldingeco");
var rpj = require("request-promise-json");
var AutoAurora = (function (_super) {
    __extends(AutoAurora, _super);
    function AutoAurora(obj) {
        _super.call(this, obj.conf.addresses, obj.conf.tz);
        var _this = this;
        if (!obj.options) {
            obj.options = {};
        }
        if (!obj.options.done) {
            obj.options.done = function (d) {
                for (var i = 0; i < d.length; i++) {
                    var sensor = d[i];
                    rpj.post("http://localhost/db/sensors/" + sensor.uid, { data: sensor });
                }
            };
        }
        if (!obj.options.time)
            obj.options.time = 30000;
        timerdaemon.pre(obj.options.time, function () {
            _this.data().then(function (d) {
                if (obj.options.urlingecold) {
                    OldIngeco(d, obj.options.urlingecold);
                }
                obj.options.done(d);
            }).catch(function (err) {
                console.log(err);
            });
        });
    }
    return AutoAurora;
}(AuroraNet));
module.exports = function (obj) {
    var AutoA = new AutoAurora(obj);
    return AutoA.Router();
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQU8sU0FBUyxXQUFXLGtCQUFrQixDQUFDLENBQUM7QUFFL0MsSUFBTyxXQUFXLFdBQVcsYUFBYSxDQUFDLENBQUM7QUFFNUMsSUFBTyxTQUFTLFdBQVcscUJBQXFCLENBQUMsQ0FBQztBQUdsRCxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQVkxQztJQUF5Qiw4QkFBUztJQUU5QixvQkFBWSxHQUFtRTtRQUMzRSxrQkFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBR3ZDLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQztRQUVqQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2YsR0FBRyxDQUFDLE9BQU8sR0FBUyxFQUFFLENBQUE7UUFDMUIsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLFVBQVMsQ0FBQztnQkFFekIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7b0JBRWhDLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFFbEIsR0FBRyxDQUFDLElBQUksQ0FBQyw4QkFBOEIsR0FBRyxNQUFNLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7Z0JBRTVFLENBQUM7WUFHTCxDQUFDLENBQUE7UUFHTCxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztZQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUVoRCxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFO1lBRTlCLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBUyxDQUFDO2dCQUV4QixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7b0JBRTFCLFNBQVMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFFMUMsQ0FBQztnQkFHRCxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQVF4QixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBUyxHQUFHO2dCQUNqQixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3JCLENBQUMsQ0FBQyxDQUFBO1FBRU4sQ0FBQyxDQUFDLENBQUM7SUFJUCxDQUFDO0lBRUwsaUJBQUM7QUFBRCxDQTVEQSxBQTREQyxDQTVEd0IsU0FBUyxHQTREakM7QUFHRCxpQkFBUyxVQUFTLEdBQW1FO0lBRWpGLElBQUksS0FBSyxHQUFHLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRWhDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7QUFHMUIsQ0FBQyxDQUFBIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEF1cm9yYU5ldCA9IHJlcXVpcmUoXCJleHByZXNzLWF1cm9yYWpzXCIpO1xuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQgdGltZXJkYWVtb24gPSByZXF1aXJlKFwidGltZXJkYWVtb25cIik7XG5cbmltcG9ydCBPbGRJbmdlY28gPSByZXF1aXJlKFwiLi9tb2R1bGVzL29sZGluZ2Vjb1wiKTtcbmltcG9ydCBQb3dlclBhcnRpYWxzID0gcmVxdWlyZShcIi4vbW9kdWxlcy9zZXRwb3dlcnBhcnRpYWxzXCIpO1xuXG5sZXQgcnBqID0gcmVxdWlyZShcInJlcXVlc3QtcHJvbWlzZS1qc29uXCIpO1xuXG5pbnRlcmZhY2UgSUFkZHJlc3Mge1xuICAgIHV1aWQ6IHN0cmluZztcbiAgICBkZXY6IHN0cmluZztcbiAgICBhZGRyZXNzOiBudW1iZXI7XG59XG5pbnRlcmZhY2UgSW9wdCB7XG4gICAgdGltZT86IG51bWJlcjtcbiAgICBkb25lPzogRnVuY3Rpb247XG4gICAgdXJsaW5nZWNvbGQ/OiBzdHJpbmc7XG59XG5jbGFzcyBBdXRvQXVyb3JhIGV4dGVuZHMgQXVyb3JhTmV0IHtcblxuICAgIGNvbnN0cnVjdG9yKG9iajogeyBjb25mOiB7IGFkZHJlc3NlczogSUFkZHJlc3NbXSwgdHo6IHN0cmluZ30sIG9wdGlvbnM/OiBJb3B0IH0pIHtcbiAgICAgICAgc3VwZXIob2JqLmNvbmYuYWRkcmVzc2VzLCBvYmouY29uZi50eik7XG5cblxuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIGlmICghb2JqLm9wdGlvbnMpIHtcbiAgICAgICAgICAgIG9iai5vcHRpb25zID0gPElvcHQ+e31cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghb2JqLm9wdGlvbnMuZG9uZSkge1xuICAgICAgICAgICAgb2JqLm9wdGlvbnMuZG9uZSA9IGZ1bmN0aW9uKGQpIHtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZC5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCBzZW5zb3IgPSBkW2ldO1xuXG4gICAgICAgICAgICAgICAgICAgIHJwai5wb3N0KFwiaHR0cDovL2xvY2FsaG9zdC9kYi9zZW5zb3JzL1wiICsgc2Vuc29yLnVpZCwgeyBkYXRhOiBzZW5zb3IgfSk7XG5cbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghb2JqLm9wdGlvbnMudGltZSkgb2JqLm9wdGlvbnMudGltZSA9IDMwMDAwO1xuXG4gICAgICAgIHRpbWVyZGFlbW9uLnByZShvYmoub3B0aW9ucy50aW1lLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgX3RoaXMuZGF0YSgpLnRoZW4oZnVuY3Rpb24oZCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLnVybGluZ2Vjb2xkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgT2xkSW5nZWNvKGQsIG9iai5vcHRpb25zLnVybGluZ2Vjb2xkKTtcblxuICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMuZG9uZShkKTtcblxuXG5cblxuXG5cblxuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgfSk7XG5cblxuXG4gICAgfVxuXG59XG5cblxuZXhwb3J0ID0gZnVuY3Rpb24ob2JqOiB7IGNvbmY6IHsgYWRkcmVzc2VzOiBJQWRkcmVzc1tdLCB0ejogc3RyaW5nfSwgb3B0aW9ucz86IElvcHQgfSkge1xuXG4gICAgbGV0IEF1dG9BID0gbmV3IEF1dG9BdXJvcmEob2JqKTtcblxuICAgIHJldHVybiBBdXRvQS5Sb3V0ZXIoKTtcblxuXG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
