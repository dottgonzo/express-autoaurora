"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AuroraNet = require("express-aurorajs");
var timerdaemon = require("timerdaemon");
var OldIngeco = require("./modules/oldingeco");
var rpj = require("request-promise-json");
var AutoAurora = (function (_super) {
    __extends(AutoAurora, _super);
    function AutoAurora(obj) {
        _super.call(this, obj.conf.addresses, obj.conf.tz);
        var _this = this;
        if (!obj.options) {
            obj.options = {};
        }
        if (!obj.options.done) {
            obj.options.done = function (d) {
                rpj.post("http://localhost/heartbeat");
                for (var i = 0; i < d.length; i++) {
                    var sensor = d[i];
                    rpj.post("http://localhost/sensors/" + sensor.uid, { data: sensor });
                }
            };
        }
        if (!obj.options.time)
            obj.options.time = 30000;
        setTimeout(function () {
            timerdaemon.pre(obj.options.time, function () {
                console.log('queryng...');
                _this.data().then(function (d) {
                    if (obj.options.urlingecold) {
                        console.log('sending to oldingeco...');
                        OldIngeco(d, obj.options.urlingecold);
                    }
                    obj.options.done(d);
                }).catch(function (err) {
                    console.log(err);
                });
            });
        }, 30000);
    }
    return AutoAurora;
}(AuroraNet));
module.exports = function (obj) {
    var AutoA = new AutoAurora(obj);
    return AutoA.Router();
};

//# sourceMappingURL=data:application/json;base64,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aXJlKFwiZXhwcmVzcy1hdXJvcmFqc1wiKTtcbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0IHRpbWVyZGFlbW9uID0gcmVxdWlyZShcInRpbWVyZGFlbW9uXCIpO1xuXG5pbXBvcnQgT2xkSW5nZWNvID0gcmVxdWlyZShcIi4vbW9kdWxlcy9vbGRpbmdlY29cIik7XG5pbXBvcnQgUG93ZXJQYXJ0aWFscyA9IHJlcXVpcmUoXCIuL21vZHVsZXMvc2V0cG93ZXJwYXJ0aWFsc1wiKTtcblxubGV0IHJwaiA9IHJlcXVpcmUoXCJyZXF1ZXN0LXByb21pc2UtanNvblwiKTtcblxuaW50ZXJmYWNlIElBZGRyZXNzIHtcbiAgICB1dWlkOiBzdHJpbmc7XG4gICAgZGV2OiBzdHJpbmc7XG4gICAgYWRkcmVzczogbnVtYmVyO1xufVxuaW50ZXJmYWNlIElvcHQge1xuICAgIHRpbWU/OiBudW1iZXI7XG4gICAgZG9uZT86IEZ1bmN0aW9uO1xuICAgIHVybGluZ2Vjb2xkPzogc3RyaW5nO1xufVxuY2xhc3MgQXV0b0F1cm9yYSBleHRlbmRzIEF1cm9yYU5ldCB7XG5cbiAgICBjb25zdHJ1Y3RvcihvYmo6IHsgY29uZjogeyBhZGRyZXNzZXM6IElBZGRyZXNzW10sIHR6OiBzdHJpbmcgfSwgb3B0aW9ucz86IElvcHQgfSkge1xuICAgICAgICBzdXBlcihvYmouY29uZi5hZGRyZXNzZXMsIG9iai5jb25mLnR6KTtcblxuXG4gICAgICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCFvYmoub3B0aW9ucykge1xuICAgICAgICAgICAgb2JqLm9wdGlvbnMgPSA8SW9wdD57fVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFvYmoub3B0aW9ucy5kb25lKSB7XG4gICAgICAgICAgICBvYmoub3B0aW9ucy5kb25lID0gZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBycGoucG9zdChcImh0dHA6Ly9sb2NhbGhvc3QvaGVhcnRiZWF0XCIpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZC5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCBzZW5zb3IgPSBkW2ldO1xuXG4gICAgICAgICAgICAgICAgICAgcnBqLnBvc3QoXCJodHRwOi8vbG9jYWxob3N0L3NlbnNvcnMvXCIgKyBzZW5zb3IudWlkLCB7IGRhdGE6IHNlbnNvciB9KTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghb2JqLm9wdGlvbnMudGltZSkgb2JqLm9wdGlvbnMudGltZSA9IDMwMDAwO1xuXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aW1lcmRhZW1vbi5wcmUob2JqLm9wdGlvbnMudGltZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3F1ZXJ5bmcuLi4nKVxuICAgICAgICAgICAgICAgIF90aGlzLmRhdGEoKS50aGVuKGZ1bmN0aW9uKGQpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMudXJsaW5nZWNvbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzZW5kaW5nIHRvIG9sZGluZ2Vjby4uLicpXG4gICAgICAgICAgICAgICAgICAgICAgICBPbGRJbmdlY28oZCwgb2JqLm9wdGlvbnMudXJsaW5nZWNvbGQpO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLmRvbmUoZCk7XG5cblxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9LCAzMDAwMCk7XG5cblxuICAgIH1cblxufVxuXG5cbmV4cG9ydCA9IGZ1bmN0aW9uKG9iajogeyBjb25mOiB7IGFkZHJlc3NlczogSUFkZHJlc3NbXSwgdHo6IHN0cmluZyB9LCBvcHRpb25zPzogSW9wdCB9KSB7XG5cbiAgICBsZXQgQXV0b0EgPSBuZXcgQXV0b0F1cm9yYShvYmopO1xuXG4gICAgcmV0dXJuIEF1dG9BLlJvdXRlcigpO1xuXG5cbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
